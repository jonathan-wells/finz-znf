# Cypriniformes species tree

# Set up monitors
moves = VectorMoves()
monitors = VectorMonitors()

# # Loading data
# filenames = readDataDelimitedFile("/workdir/jnw72/Projects/finz-znf/data/species-phylogeny/revbayes-data/busco-input/busco_files.txt")
# di = 0
# for (filename in filenames) {
#     data[++di] <- readDiscreteCharacterData(filename[1])
# }

data <- readDiscreteCharacterData("/workdir/jnw72/Projects/finz-znf/data/species-phylogeny/revbayes-data/busco-input")

num_partitions <- data.size()
num_taxa <- data[1].ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data[1].taxa()

# Set up branch lengths plate
lambda <- 10.0
for ( i in 1:num_branches ) {
    br_lens[i] ~ dnExponential(lambda)
    moves.append(mvScale(br_lens[i]))
}

# Set up uniform starting topology
outgroup = clade("Chanos_chanos")
topology ~ dnUniformTopology(taxa, outgroup=outgroup)
psi := treeAssembly(topology, br_lens)

moves.append(mvNNI(topology, weight=num_taxa))
moves.append(mvSPR(topology, weight=num_taxa/10.0))

# Instantaneous rate matrix
Q <- fnJones()

# Set up PhyloCTMC plate
for ( i in 1:num_partitions ) {
    # Site rates
    alpha[i] ~ dnLognormal(ln(1.5), 0.6)
    site_rates[i] := fnDiscretizeGamma(alpha[i], alpha[i], 4, false)
    moves.append(mvScale(alpha[i], lambda=1.0, weight=2.0))

    # Proportion of invariant sites
    p_inv[i] ~ dnBeta(alpha=1.0, beta=1.0)
    moves.append(mvBetaProbability(p_inv[i], weight=2.0))
}

for ( i in 1:num_partitions ) {
    # Partition rates
    if ( i==1 ) {
        branch_rates[i] <- 1.0
    } else {
        branch_rates[i] ~ dnGamma(1.5, 1.5)
        moves.append(mvScale(branch_rates[i]))
    }
    TL[i] := sum(br_lens) * branch_rates[i]
}

for ( i in 1:num_partitions ) {
    seq[i] ~ dnPhyloCTMC(tree=psi, 
                         Q=Q,
                         branchRates=branch_rates[i],
                         siteRates=site_rates[i],
                         pInv=p_inv[i],
                         type="Protein")
    seq[i].clamp(data[i])
}

# Connecting model components
cypmodel = model(psi)

# Monitors and log files
monitors.append(mnModel(filename="output/cypriniformes_JTT.log", printgen=10))
monitors.append(mnFile(filename="output/cypriniformes_JTT.trees", printgen=10, psi))
monitors.append(mnScreen(printgen=100, TL))

# Run the MCMC
cypmcmc = mcmc(cypmodel, monitors, moves)
cypmcmc.burnin(generations=2000, tuningInterval=200)
cypmcmc.run(generations=30000)

quit()
